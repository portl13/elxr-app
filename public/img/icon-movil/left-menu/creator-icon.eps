%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.5.1 (Build 21G83) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 21 26
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 21 26
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
q
0 0 21 26 rc
21 0 0 26 0 0 cm
BI
/Width 63
/Height 78
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
JcE[gXoB"/qY\@XkdA1a[D1\`lLk,Sri6"#rt5##r3F#oSZ:>5Wn?4ho)/IcWrK4$&bl(uZG#1eWn<lB
f\b`[r;HVps3^iMp%S@VpA=jgk5Q%fq#%G2i16n#SZ:?"j7<-HroX7[rWV]Yq#('gcMuMr%f#ktfA,hs
\DG'Ek480?k5Q%fq#%G2i16n#SZ:?"j7<-HroX4jl0S,@ZJ2k)ip#h'rVc`Fs4@8\fA,hlZJ1qMfVYt/
fA,iorosFpp\=Zl^#5H]fU]%phrF;*rVl']&cM\-]#3R#XOs)DfWD[?o_/.2s4@8_nFHCha5rklfU]%p
]>Wdsn+Z)H&bl(uZG#1eWn<lBf\b`[r;HWZrt4,Jnt`MDSZ:>5Wn>t[n,*%]eGn%u&_u@8X1$iTWn=#J
g!8.6qYU6Xrt5&%r3a;uTWQn?XkDXno)/Icm/I[nqY[S0hk$n$SZ:>M^Z"n\qpGGnrt4u!qo6qFSu^M7
Wn=YkiT04pm/IRmr;GX;o@`!ig>DDjo_SRdn,NCd&_Gk-U9<4@Wn<uGg#M8erVc`Cs3^iYio]j;]\o?\
fUf.rajB;Iq>AG9&bPen[D1[kWn<lBfYGVkq"aj5s3^iYqYU69eE`g1fq5@u\\dCjlh0iKrr*B*rr2lq
rr)fprVc`orVc`art4&FnZB=XSZ:><YhSL3p\k*jcMu2i$gI$O^W>NTbieE`q"Xk8rVlfor;HHfr:BUX
k3DWriptg\nCumjio]k!n+ZPMqtg3gr;HTnqu?Zp$g-^HZb>;BeEcr,r6,,crs8T%rqcNjqu$Els8N!T
rVc`jq>BC?oukeKZ+T"hY1fGHfU]%pSZ:>5Wn<lBfU]%pUp/R]^uEbnm-X<;qYU6irr2fp"oA)oqu$El
rlb?4s8N!!rVc`Ls$$D\rq?*`gYhS.^>Y]cfq#.qSZ:>5Wn<lBfU]%pSZ:>5Wn<lBfU]%pSZ:>5Wn<lB
fV,J$]uK0rl1OlKr;Q]LrrN&rrVl9cp&>O!r;GpJp>"Wsq>1$frr1sX8,N5_jQQ6H_rIAjfq#.qSZ:>5
Wn<rFfV#A"UT`CKZJ2=bgo.R7Up/UIY1]JMfq,7sSZ:>5Wn<lBfV,G#`6@E4nbE(^ro="drVlflqY\q!
mdTfCrr2Kgp&>WlnG'N0ih<L-]>Wdolh1/QrVlfbs8N!Bp@nI3fBfHCgmtItSZ:>6X4X,KfrhmCaNs,/
jRW!;qu-Kmrr;us,Pq<9mdU#+i:+S)k,G`CTWQn<Wn<lBfU]%pXgm6Olh1/QrTsR`rXo&*rT388[D1[k
Wn>&+jneiPo)JLb)Z'@0g"u4jXOs)DfU]%pV6Sdsd-:)lq>C3jp&G$j)Y<Uta3WtCY1]AGfU]%pTrm"W
^uF20nbDqXj8U%jpA<=lmB*nTTWHh;Wn<lBfVYt/hrOA*qu-*c(]=40nFHCmbNGS%fq#.qSZ:>7XP)e&
p&=s`s7lU7qu$EPk4>pmiLm:*SZ:>5Wn<oDfW;R=f\Q#lqY^-g(\@:q`m*_?XkB8FfUf.rX1-p7g@"_1
r7Crbo_&(#cKM.2gRY@sSZ:>;YM.moo)&@`q#;9-q>A^pmARAHSZ:>5Wn<lBfV#A"\&%(jme?_[p&FU_
(\[V#db*re[G@IVfU]%pSZ:>;YhI:KlMLSqp\=X.dH[F.fq#.qSu^MP^uFG=o`"j;rtkY5rn6/tX1$iT
Wn<lBfVPk-k3;R;rVl]o(W4GZTWQn<Wn<lBfUo7uX1$j=i:-[BrU9dTrtPG2rpTCP`6@D>YM,SKfWMdB
kN_a>rtPD0rmfckVR"sIWn<oDfXf#]lL";ds8N!0i8jI+ZJ1qMfU]%pYIWQ[o(i:arr3SjkOYRVgRbIu
UTiInd-:2qqW\%ErsS`%rT*27]uK-UdH^`1rr3Skkk)6riLR"$SZ:>O^uFPBp&=s-rt3i;m\I)ASZ:>5
Wn>;8kkOuOrr;us$c0sI]uK-umIpMWroX7@rrrB"rqcNjrr3T-qu+R]kanj-SZ:>E\DH'$nc&O&s8N!0
`m*_@XkB8FfV#>!jll@8rVlfr!r;]jrr1jUgA_cPnG',qhOU\!UT`Ctf'N81rOMq?pA"Nj]\oB^fU]%p
\\dD"p\WSBh>\)aqu,:-n=H]5SZ:>R_rL%Lp9Xc2gYhRsYhP_KfUo7tk3;R;rVkONh>\)Xo_QDGk+/O)
U9<4tfBiJ7rj2V:qtp>t]\oB^fU]%pa3NoDq>AtHh>[uMmImQfh4:Ru[(bM\kk)"W%ainpU9E:AWn=D^
hXgF:gAg+2&cDS*hW+0uX4WuCfYbnqo_&'_rt4VcpSP7NSZ:>6X4Z\'pAP!ih>cF5&bl(ucdqHRWn<uH
g!J=:rVc_trt52,rNEfiSZ:>5Wn>t\n,*%]h>dKS(]+%-qYL0eqYg9erVHBhqYL0eqYg<grVlfqrsnYn
qS^V@SZ:>@[+s?kn>H9r]uK-*XP'/EfZV_.q>1$gs8N!6qYU6fqYg9erVHBhqYL0eqYg9erVQKjqu7]6
r;G1#m`sAKcdhC-ea(N2ld+,JcIM75hXC78r;Q^+nalRh`T3SifWMdBhrO@+rsm,rl(P64SZ:>Zb3&Kp
r;Q^7p\=[9g@!8:ld"&HcdhC-ea(N2ld+,JfA5oprr2p<p\=Ze[b[LSfU]%pSZ:>5Wn<lBfU]%pYe/f`
o_JLd%e0&b\AI9sWn=Shi8WnjVuI7OeE`g2fq#.q]uK.-q#(-k*UrXqVR"sIWn<lBfU]%pSZ:>5Wn<lB
fWVmDrVlfqruLn1r2mKcSu^M8X4X#EfUf.rSu^M8X4X_ji:?O9rr3Jto(ff4j.34&ZFo,Tk4>MN%aNSi
Ts!(>Wn>#)jS/HIrr4#.o(f5kgn(S!Su^M8X4X#EfUf.rSu^MJ]ANSdrr2p<q>1$*al^%IijQY^[_Un2
^uDf<ijQY^`QdW>pA=jh%e9/d]Z&s&Wn=Jbhr!McVuI7Jcfq.*fq#.q_TM$9q>C6l)Y<Xu^;f9C^uDf<
ijQY^[_Un2^uDf<ikrt&rr2osi;X;Yp%lYPkaea+W3b:3hX@BB%_TdAT<-_:Wn>PElM:;Sh>cF5&bu2"
db*rXWn<rFg!/%4qu$Dprt5)'r2mKcSZ:>5Wn?%_nGE.^h>cF5&cM\-iT9[(XkB8FfY5DfnFHCWrsn,Q
oVJhISZ:>8XkE(/p\t0Js5!\emdU"Y^>YW_fW)C9g>DDurVj/'&cDS*_9(i4XP'/EfXScWpA"O=s5!\e
p\=X3f'Js-fUf.r_oq67p%l#p&aJcWW3k?NWn<oDf[nsJqtp?Gs5!_SrXn>YoqeqJSZ:>C[b]ZpnGN7a
\c39<qu+CSk+Jj0SZ:>D\)-ZHq>UBIs4[Jbp%S?r`T3VkfU]%p^;f:&nG'Qo&`MjCVR"sIWn<rFf[AF>
qYU6Cs5s=erVc`iq#'j\qu6WprXmc<n#3VKSZ:>=Z.m[Xm.pMU^]+o=pA;>7ih!4'SZ:>I]AW5Nq>UBm
rrr)iqtKm`rr1sXm/R(a%f#ktkN_`dea1f>mem"]rr3]&oD-;IkFep0SZ:>K^#A&8o_ndg`W$YNrVk3r
m%UZ:SZ:>:Y1hXgnGE.^rr3K+r;Fpjld+/KlL"<AqYgEml2U5P'`7e+mI0eug$PrQhOU\!Ye/fYmJ$V[
rr*Mgjn#^ghjpe"T<-_bc04clqSiIHmdU"O[b[LSfU]%p^W5I0q"ssg'^+fTW3k?NWn=Pfhq-ZPn+$2O
rVl0`p&>s/rVlB[qVC-#\\dC!XOs)DfU]%pWjU[4g@"k<'_qM%cIM6UYhGYJfW)@8f\Z)pr;Fh='`._*
aNs+DXP'/EfVl14l0S-BrVl]o(X:IqV6SdGWn<lBfUo7u]Z&slkOeHAqu6Tcs7lU7rVc`^me=ZDkG,98
SZ:>5Wn<uHfrhmCajB;>nG)eY&aSlZ]Z&s'X4WuCfY#2amI9nort4>UoW>X[SZ:>7XP)"Qm/$VXq#;8u
me=ZDkH)/LT<-_:Wn<lBfVPk-bL5\Ip%n[ep&Fge)Ys7-e_9GaXkB8FfUf.rWO1Hpa5u@Eo_e[ep&>a)
rVkI+n#EeOSZ:>>ZJ3p`mf!+`dJjgUr;FLTk+Ss2SZ:>K^#8MSqYpKeru1h6rnlf-]#3R+ZeV+OfU]%p
Trm#-k4AQMrq6<ds8N!0m-j\U^>YongU=oWfA5ojq>BUZ&b>Si_oq57X4WuCfYbnqoC_t-rt4Yfpoq?e
SZ:>7XP)Cfnb`7_m/I[lq"rOnmBaLbU9<4\_W1Igr:9m\rsS]"rSQ],c-u"Jo(i:al2Ub^%bKM)VR"sI
Wn=_oiTBCtdJj^1hsdSOgmtItXgm6[p%m_K$h!NZ`QdW0lLk,Trpp*[s8N!!rVlfSrsn,RoWu6hSZ:>B
[b]]rnBq7GajB:IYM,PIfYl"sq"ajGrrE#qrpTm1rsnJepqFc0SZ:>9Y1_7UmJd+:rt55/rk$,0T<-\9
Wn>nWmecn[aT'H`&bl(t`m3e=Wn<lBfZDP*qYU6Crt5##r3X2sSZ:>5Wn?Fso_nafaT'H`9)\bgd+7QV
XkB8FfXJ]Vg"u5Wjn%HmoASg&iT9[ijn%HmoASg&iT9[ijn%HmoASg&iT9[ijn%Hmo@;R_WO:QQWn=&K
g@=e1`W+$Z8(ZPbVR"sIWn=)Ng9%mAYe&_r]&0a'hls]LYe&_r]&0a'hls]LYe&_r]&0a'hls]LYe&_r
]&0Qsh4Uk&SZ:>B[b^WMqo/TVs$to)nZ94VSZ:>5Wn<lBfU]%pSZ:>5Wn<lBfU]%pSZ:>5Wn<lBfU]%p
SZ:>5Wn<lBfU]%pSZ:>5Wn<lBfU]%p[(bMmq"r&1aT"cnlLhm3jfQ&LXgm5i\DF?thQ=<EXgm5i\DF?t
hQ=<EXgm5i\DF?thQ=<EXgm5i\DF?thQ=<EXgm5i\DF?thT*q*q>1$.s2b41p@nIHl1Nono&&KuhW+1`
j7;*fo%rEthW+1aj7;'eo%rEthrF:aj7;'eo&&KuhW+1`j7;*fo%rEthW+1aj7;I$pAOsh`W(Mh`;dgV
rr,"PpA=4Ep[%>Bm-aW7me?)9p[%>Bm-aW7me?)9p[%>Bm-aW7me?)9p[%>Bm-aW7me?)9p[%>Bq>1$(
s2G"(r;HWKhse4qj1<1h]>WdA`8eGIj1E7j]#<X?`8eJJjLW:i]#<X@`8nMJj1<1h]>WdA`8eGIj1E7j
lL"<Drr0e7`W&7$r;FdclCFs-SZ:>5Wn<lBfU]%pSZ:>5Wn<lBfU]%pSZ:>5Wn<lBfU]%pSZ:>5Wn<lB
fU]%pSZ:?$jn&HLrke]Ss$?P[rQ`pYUT`CHYM,bTg7tk*UT`CHYM,bTg7tk*UT`CHYM,bTg7tk*UT`CH
YM,bTg7tk*UT`CHYM/%"o_naf_Z.UT55kK[kj.okg@!GCmF9kXeCs?>g$R;CmaTtYe(O-<g@!JEmaKkV
eCs??g@!GCmF9kXeCs?>g$R;Cmdg#Grr0e7JcE[gJcE[g`W,r:488OJnalSHoD.qJq=4(PnalSHoD.qJ
q=4(PnalSHoD.qJq=4(PnalSHoD.qJq=4(PnalSHoD/7[rP/BOs$$D[rnZT(^rYZRaQC:Zk.o(#^rYZR
aQC:Zk.o(#^rYZRaQC:Zk.o(#^rYZRaQC:Zk.o(#^rYZRaQDjWp\t0/s2G"(qu$E8dH[:&fU]%pSZ:>5
Wn<lBfU]%pSZ:>5Wn<lBfU]%pSZ:>5Wn<lBfU]%pSZ:>5Wn<lBfU]%piT9\0rVj\6`W&7$r;FjglCb94
TWQn=X4WuCfU]%pSu^M:XP'8Kfq>J#TWQn?XkB>Jfq#.qSZ:>5Wn<rFfq>J#TWQo,k4AQMrke]Ss8N!Z
nalS<kk+!#oZ5DDUp/RDWn=Pfhq[2\jll?ukk+!#o]></c-u!UZJ1qMfVl14f%f]Tkk+!#o_8.Xrr0e7
_Z0E1&)ZF<Y.<D[Wn=;Xh!+2!rV?F)qu$E4cKM%,g7>7r\%q"knbE"\]`5PB.IZg%^;o?+Wn<oDfXo)_
io]k+p\XINq9IOVWO1HOWn<lBf[&.8p\=Zps1/.Yqu$EFh=%AOh4:RuTrm"K\)"@'i39fMV6SdHX4WuC
fWi'Hl0S-Brr0A+[f7TFp\W:em&.2FSZ:>5Wn<lBfU]%pSZ:>5Wn=G`hVI2]qYU5ts0ht,rZ1\*qqBrs
YI`V`XOs)DfU]%pV6SdiaQ;IFo_J@]YlCs-(]=40p%J:Ro_S.Nq==1RoC_tTq>C3jriQ3Os2=qgs2=qf

~> %APLeod
EI
ep
end
%%Trailer
%%EOF
